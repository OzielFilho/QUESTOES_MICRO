CCS PCM C Compiler, Version 4.115, 93507588               14-dez-10 21:24

               Filename: F:\ACEPIC\CDS Kits ACEPIC\CD ACEPIC PRO V2.0\Programas\Exemplos\PIC 16F877A\7_SEG\7_SEG_0_100.lst

               ROM used: 253 words (3%)
                         Largest free fragment is 2048
               RAM used: 27 (7%) at main() level
                         29 (8%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0AF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... /******************************************************************************* 
.................... *                     Kit de desenvolvimento ACEPIC PRO V2.0                   * 
.................... *                      ACEPIC Tecnologia e Treinamento LTDA                    * 
.................... *                               www.acepic.com.br                              *  
.................... *                                                                              * 
.................... *Objetivo: Teste Display 7 segmentos                                           * 
.................... *Obs.:     Ligar chave 1, 5, 6, 7 e 8 do DIP DP2                               * 
.................... *          Após a gravação, tire o cabo serial                                 *   
.................... ********************************************************************************/ 
.................... #include<16F877A.h>            
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay (clock=8000000)         
0099:  MOVLW  36
009A:  MOVWF  04
009B:  BCF    03.7
009C:  MOVF   00,W
009D:  BTFSC  03.2
009E:  GOTO   0AC
009F:  MOVLW  02
00A0:  MOVWF  78
00A1:  CLRF   77
00A2:  DECFSZ 77,F
00A3:  GOTO   0A2
00A4:  DECFSZ 78,F
00A5:  GOTO   0A1
00A6:  MOVLW  97
00A7:  MOVWF  77
00A8:  DECFSZ 77,F
00A9:  GOTO   0A8
00AA:  DECFSZ 00,F
00AB:  GOTO   09F
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   0F9 (RETURN)
.................... #fuses HS, NOWDT, PUT, BROWNOUT, NOLVP  
....................  
.................... int conta=0; 
.................... int un, dec, cent; 
....................  
.................... /*Matriz de 10 posições contendo o valor a ser enviado para a porta D a fim de 
....................    mostrar o dígito referente nos displays */ 
.................... int digito[10] = 
....................                {0b00111111,    //Dígito 0 
....................                 0b00000110,    //Dígito 1 
....................                 0b01011011,    //Dígito 2 
....................                 0b01001111,    //Dígito 3 
....................                 0b01100110,    //Dígito 4 
....................                 0b01101101,    //Dígito 5 
....................                 0b01111101,    //Dígito 6 
....................                 0b00000111,    //Dígito 7 
....................                 0b01111111,    //Dígito 8 
....................                 0b01101111     //Dígito 9 
....................                }; 
*
00BB:  MOVLW  3F
00BC:  BCF    03.5
00BD:  MOVWF  2B
00BE:  MOVLW  06
00BF:  MOVWF  2C
00C0:  MOVLW  5B
00C1:  MOVWF  2D
00C2:  MOVLW  4F
00C3:  MOVWF  2E
00C4:  MOVLW  66
00C5:  MOVWF  2F
00C6:  MOVLW  6D
00C7:  MOVWF  30
00C8:  MOVLW  7D
00C9:  MOVWF  31
00CA:  MOVLW  07
00CB:  MOVWF  32
00CC:  MOVLW  7F
00CD:  MOVWF  33
00CE:  MOVLW  6F
00CF:  MOVWF  34
....................  
.................... #INT_TIMER0 
.................... void trata_t0() 
.................... { 
.................... conta++; 
*
002F:  INCF   27,F
.................... if (conta>4) conta = 1; 
0030:  MOVF   27,W
0031:  SUBLW  04
0032:  BTFSC  03.0
0033:  GOTO   036
0034:  MOVLW  01
0035:  MOVWF  27
....................  
.................... switch(conta) 
....................           { 
0036:  MOVLW  01
0037:  SUBWF  27,W
0038:  ADDLW  FC
0039:  BTFSC  03.0
003A:  GOTO   08B
003B:  ADDLW  04
003C:  GOTO   091
....................         case 1: OUTPUT_D(digito[0]);   //Coloca na Porta D o valor referente ao dígito 0 
003D:  BSF    03.5
003E:  CLRF   08
003F:  BCF    03.5
0040:  MOVF   2B,W
0041:  MOVWF  08
....................                        OUTPUT_A(0x00);  
0042:  BSF    03.5
0043:  CLRF   05
0044:  BCF    03.5
0045:  CLRF   05
....................                        OUTPUT_E(0X01);      //Liga o Display 1 e desliga os demais  
0046:  BSF    03.5
0047:  BCF    09.0
0048:  BCF    09.1
0049:  BCF    09.2
004A:  MOVLW  01
004B:  BCF    03.5
004C:  MOVWF  09
....................                        break;  
004D:  GOTO   08B
....................       case 2: OUTPUT_D(digito[cent]);   //Coloca na Porta D o valor referente ao dígito 1 
004E:  MOVLW  2B
004F:  ADDWF  2A,W
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  MOVWF  37
0054:  BSF    03.5
0055:  CLRF   08
0056:  BCF    03.5
0057:  MOVF   37,W
0058:  MOVWF  08
....................                        OUTPUT_E(0X02);      //Liga o Display 2 e desliga os demais 
0059:  BSF    03.5
005A:  BCF    09.0
005B:  BCF    09.1
005C:  BCF    09.2
005D:  MOVLW  02
005E:  BCF    03.5
005F:  MOVWF  09
....................                        break;  
0060:  GOTO   08B
....................       case 3: OUTPUT_D(digito[dec]);   //Coloca na Porta D o valor referente ao dígito 2 
0061:  MOVLW  2B
0062:  ADDWF  29,W
0063:  MOVWF  04
0064:  BCF    03.7
0065:  MOVF   00,W
0066:  MOVWF  37
0067:  BSF    03.5
0068:  CLRF   08
0069:  BCF    03.5
006A:  MOVF   37,W
006B:  MOVWF  08
....................                        OUTPUT_E(0X04);      //Liga o Display 3 e desliga os demais 
006C:  BSF    03.5
006D:  BCF    09.0
006E:  BCF    09.1
006F:  BCF    09.2
0070:  MOVLW  04
0071:  BCF    03.5
0072:  MOVWF  09
....................                        break;  
0073:  GOTO   08B
....................       case 4: OUTPUT_D(digito[un]);   //Coloca na Porta D o valor referente ao dígito 2 
0074:  MOVLW  2B
0075:  ADDWF  28,W
0076:  MOVWF  04
0077:  BCF    03.7
0078:  MOVF   00,W
0079:  MOVWF  37
007A:  BSF    03.5
007B:  CLRF   08
007C:  BCF    03.5
007D:  MOVF   37,W
007E:  MOVWF  08
....................                        OUTPUT_E(0x00);  
007F:  BSF    03.5
0080:  BCF    09.0
0081:  BCF    09.1
0082:  BCF    09.2
0083:  BCF    03.5
0084:  CLRF   09
....................                        OUTPUT_A(0X20);      //Liga o Display 4 e desliga os demais 
0085:  BSF    03.5
0086:  CLRF   05
0087:  MOVLW  20
0088:  BCF    03.5
0089:  MOVWF  05
....................                        break;  
008A:  GOTO   08B
....................           }  
....................  
.................... SET_TIMER0(100);  
008B:  MOVLW  64
008C:  MOVWF  01
.................... } 
....................  
....................  
008D:  BCF    0B.2
008E:  BCF    0A.3
008F:  BCF    0A.4
0090:  GOTO   01B
.................... void main() 
.................... { 
*
00AF:  CLRF   04
00B0:  BCF    03.7
00B1:  MOVLW  1F
00B2:  ANDWF  03,F
00B3:  CLRF   27
00B4:  BSF    03.5
00B5:  BSF    1F.0
00B6:  BSF    1F.1
00B7:  BSF    1F.2
00B8:  BCF    1F.3
00B9:  MOVLW  07
00BA:  MOVWF  1C
.................... ENABLE_INTERRUPTS(GLOBAL | INT_TIMER0); 
*
00D0:  MOVLW  E0
00D1:  IORWF  0B,F
.................... SETUP_TIMER_0(RTCC_INTERNAL | RTCC_DIV_16 |RTCC_8_BIT); 
00D2:  BSF    03.5
00D3:  MOVF   01,W
00D4:  ANDLW  C0
00D5:  IORLW  03
00D6:  MOVWF  01
.................... SET_TIMER0(100); 
00D7:  MOVLW  64
00D8:  BCF    03.5
00D9:  MOVWF  01
....................  
.................... un = 0; 
00DA:  CLRF   28
.................... dec = 0; 
00DB:  CLRF   29
.................... cent = 0; 
00DC:  CLRF   2A
....................  
.................... while(true) 
....................         { 
....................         un++; 
00DD:  INCF   28,F
....................         if (un>9)  
00DE:  MOVF   28,W
00DF:  SUBLW  09
00E0:  BTFSC  03.0
00E1:  GOTO   0EA
....................            { 
....................             un=0; 
00E2:  CLRF   28
....................             dec++; 
00E3:  INCF   29,F
....................             if (dec>9) 
00E4:  MOVF   29,W
00E5:  SUBLW  09
00E6:  BTFSC  03.0
00E7:  GOTO   0EA
....................                { 
....................                dec=0;  
00E8:  CLRF   29
....................                cent++; 
00E9:  INCF   2A,F
....................                } 
....................            } 
....................       if((cent==1) && (dec==0) && (un == 1)) 
00EA:  DECFSZ 2A,W
00EB:  GOTO   0F4
00EC:  MOVF   29,F
00ED:  BTFSS  03.2
00EE:  GOTO   0F4
00EF:  DECFSZ 28,W
00F0:  GOTO   0F4
....................         { 
....................         cent=0; 
00F1:  CLRF   2A
....................         dec=0; 
00F2:  CLRF   29
....................         un=0; 
00F3:  CLRF   28
....................         } 
....................          
....................       delay_ms(1000); 
00F4:  MOVLW  04
00F5:  MOVWF  35
00F6:  MOVLW  FA
00F7:  MOVWF  36
00F8:  GOTO   099
00F9:  DECFSZ 35,F
00FA:  GOTO   0F6
....................       } 
00FB:  GOTO   0DD
....................  
.................... } 
....................  
....................  
00FC:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
