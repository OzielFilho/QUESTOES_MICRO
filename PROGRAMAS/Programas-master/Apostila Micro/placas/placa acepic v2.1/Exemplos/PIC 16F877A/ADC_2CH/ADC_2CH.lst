CCS PCM C Compiler, Version 4.108, 41302               08-jan-11 11:49

               Filename: G:\ACEPIC\CDS Kits ACEPIC\CD ACEPIC PRO V2.0\Programas\Exemplos\PIC 16F877A\ADC_2CH\ADC_2CH.lst

               ROM used: 793 words (10%)
                         Largest free fragment is 2048
               RAM used: 21 (6%) at main() level
                         42 (11%) worst case
               Stack:    4 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   222
0003:  NOP
.................... #include<16F877A.h>              
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
....................  
.................... #device ADC = 10                //Define 10 bits para o resultado da conversão AD 
....................  
.................... #use delay (clock=8000000)         
*
001C:  MOVLW  39
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   02F
0022:  MOVLW  02
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  97
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 00,F
002E:  GOTO   022
002F:  RETURN
....................  
.................... #fuses HS, NOWDT, PUT, BROWNOUT, NOLVP //Configuração dos fusíveis 
....................  
.................... #include "LCD8B.c"      //Diretiva de inclusão do arquivo LCD8B.c ao projeto 
.................... #define EN PIN_E1			//Definimos o pino 1 da porta E como EN 
.................... #define RS PIN_E0			//Definimos o pino 0 da porta E como RS 
.................... #define DATA OUTPUT_D		//Definimos a saída para a porta D como DATA 
....................  
....................  
.................... void lcd_cmd(byte cmd)		//Função para envio de comandos para o LCD 
.................... { 
....................  DATA(cmd);				//Coloca o conteúdo da variável cmd na porta D 
0030:  BSF    03.5
0031:  CLRF   08
0032:  BCF    03.5
0033:  MOVF   3E,W
0034:  MOVWF  08
....................  OUTPUT_HIGH(EN);			//Pulso alto (1) no pino EN (Pino 1 da porta E) 
0035:  BSF    03.5
0036:  BCF    09.1
0037:  BCF    03.5
0038:  BSF    09.1
....................  OUTPUT_LOW(EN);			//Retorna a nível baixo (0) em EN 
0039:  BSF    03.5
003A:  BCF    09.1
003B:  BCF    03.5
003C:  BCF    09.1
.................... } 
003D:  RETURN
....................  
....................  
.................... void lcd_envia_byte(boolean nivel,byte dado) 	//Função para envio de dados ou escrita para o  
....................  												//LCD 
.................... { 
....................  OUTPUT_LOW(RS);			//Coloca em nível baixo o pino RS (Pino 0 da porta E) 
*
006D:  BSF    03.5
006E:  BCF    09.0
006F:  BCF    03.5
0070:  BCF    09.0
....................  OUTPUT_BIT(RS,nivel);		//Coloca o pino RS no nível da variável nivel 
0071:  MOVF   3C,F
0072:  BTFSS  03.2
0073:  GOTO   076
0074:  BCF    09.0
0075:  GOTO   077
0076:  BSF    09.0
0077:  BSF    03.5
0078:  BCF    09.0
....................  delay_us(100);				//Atraso de 100 us 
0079:  MOVLW  42
007A:  MOVWF  77
007B:  DECFSZ 77,F
007C:  GOTO   07B
007D:  NOP
....................  OUTPUT_LOW(EN);			//Coloca em nível baixo o pino EN 
007E:  BCF    09.1
007F:  BCF    03.5
0080:  BCF    09.1
....................  lcd_cmd(dado);				//Chama a função lcd_cmd já com os dados a serem enviados    
0081:  MOVF   3D,W
0082:  MOVWF  3E
0083:  CALL   030
....................  							//para a porta D 
.................... } 
0084:  RETURN
....................  
....................  
....................  
.................... void lcd_pos_xy(byte x, byte y)	//Função de posicionamento do cursor			 
.................... { 
....................  byte endereco;		 		//Variável de informação para o endereço do cursor  
....................  if (y!=1)			 		//Se o valor de y for 2 
*
009F:  DECFSZ 3A,W
00A0:  GOTO   0A2
00A1:  GOTO   0A5
....................          endereco = 0xC0;	 	//então endereco vai ser igual a 0xC0 (endereço da segunda linha) 
00A2:  MOVLW  C0
00A3:  MOVWF  3B
....................  else				 		//Senão 
00A4:  GOTO   0A7
....................          endereco = 0x80;	 	//endereço vai ser igual a 0x80 (endereço da primeira linha)  
00A5:  MOVLW  80
00A6:  MOVWF  3B
....................  endereco += x-1;         	 	//Aqui decrementa o valor da variável x e o resultado é somado com 
00A7:  MOVLW  01
00A8:  SUBWF  39,W
00A9:  ADDWF  3B,F
....................  				 			//a variável endereço... 
....................  lcd_envia_byte(0,endereco);  //Chama a função lcd_envia_byte, com o valor 0, informando para 
00AA:  CLRF   3C
00AB:  MOVF   3B,W
00AC:  MOVWF  3D
00AD:  CALL   06D
....................  				  			  //o LCD que será enviado um dado e o dado está contido na 
.................... 				  			  //variável endereço...		 
....................  } 
....................   
.................... void lcd_escreve(char c)		//Função para envio dos caracteres e/ou dados para o LCD 
.................... { 
....................  switch(c)						//comando switch com a variável c 
....................  { 
*
0085:  MOVF   38,W
0086:  XORLW  0C
0087:  BTFSC  03.2
0088:  GOTO   093
0089:  XORLW  06
008A:  BTFSC  03.2
008B:  GOTO   09B
008C:  XORLW  07
008D:  BTFSC  03.2
008E:  GOTO   09B
008F:  XORLW  05
0090:  BTFSC  03.2
0091:  GOTO   0AF
0092:  GOTO   0B4
....................   case '\f' : lcd_envia_byte(0,1);	//Caso c seja ‘\f’, o dado 1 será enviado ao LCD para  
0093:  CLRF   3C
0094:  MOVLW  01
0095:  MOVWF  3D
0096:  CALL   06D
.................... 								//limpar todo o seu conteúdo. 
....................                   delay_ms(2);		//Atraso de 2 ms 
0097:  MOVLW  02
0098:  MOVWF  39
0099:  CALL   01C
....................                   break;				//Comando break, terminou o processo acima, já não testa  
009A:  GOTO   0BA
....................  								//nenhum outro caso...  
....................   case '\n' : 					//Caso c seja ‘\n’ 
....................   case '\r' : lcd_pos_xy(1,2);		//ou ‘\r’, muda o cursor para a segunda linha do LCD 
009B:  MOVLW  01
009C:  MOVWF  39
009D:  MOVLW  02
009E:  MOVWF  3A
....................                   break;				//Comando break 
*
00AE:  GOTO   0BA
....................   case '\b' : lcd_envia_byte(0,0x10); //Caso c seja ‘\b’ então desloca o cursor para a esquerda 
00AF:  CLRF   3C
00B0:  MOVLW  10
00B1:  MOVWF  3D
00B2:  CALL   06D
....................                    break;				//Comando break 
00B3:  GOTO   0BA
....................   default    : lcd_envia_byte(1,c);	//caso seja um caractere qualquer, então este será escrito no  
00B4:  MOVLW  01
00B5:  MOVWF  3C
00B6:  MOVF   38,W
00B7:  MOVWF  3D
00B8:  CALL   06D
....................  									//LCD pela função lcd_envia_byte… 
....................                    break;				//Comando break 
00B9:  GOTO   0BA
....................  } 
.................... }   
00BA:  RETURN
....................  
....................  
....................  
.................... void lcd_ini()						//Função de inicialização do LCD 
.................... { 
....................  byte conta;						//Variável de contagem  
....................  	 
....................  DATA(0x00);						//Coloca na porta D o valor 0x00 
*
003E:  BSF    03.5
003F:  CLRF   08
0040:  BCF    03.5
0041:  CLRF   08
....................  OUTPUT_LOW(RS);					//Coloca em nível baixo o pino RS 
0042:  BSF    03.5
0043:  BCF    09.0
0044:  BCF    03.5
0045:  BCF    09.0
....................  OUTPUT_LOW(EN);					//Coloca em nível baixo o pino EN 
0046:  BSF    03.5
0047:  BCF    09.1
0048:  BCF    03.5
0049:  BCF    09.1
....................   
....................  delay_ms(15);						//Atraso de 15ms 
004A:  MOVLW  0F
004B:  MOVWF  39
004C:  CALL   01C
....................   
....................  for (conta=1;conta<=3;conta++)	//Para conta = 1 até conta = 3, ou seja executará 3 vezes os   
004D:  MOVLW  01
004E:  MOVWF  2C
004F:  MOVF   2C,W
0050:  SUBLW  03
0051:  BTFSS  03.0
0052:  GOTO   05B
....................  									//comandos abaixo 
....................       { 
....................       lcd_cmd(0x30);					//Envia o comando 0x30 para o LCD 
0053:  MOVLW  30
0054:  MOVWF  3E
0055:  CALL   030
....................       delay_ms(5);					//Atraso de 5ms 
0056:  MOVLW  05
0057:  MOVWF  39
0058:  CALL   01C
....................       } 
0059:  INCF   2C,F
005A:  GOTO   04F
....................   
....................  lcd_cmd(0x38); 		//Escreve comando para interface de 8 vias de dados 
005B:  MOVLW  38
005C:  MOVWF  3E
005D:  CALL   030
....................  lcd_cmd(0x01); 		//Escreve comando para limpar todo o display 
005E:  MOVLW  01
005F:  MOVWF  3E
0060:  CALL   030
....................   
....................  delay_ms(1);			//Atraso de 1ms 
0061:  MOVLW  01
0062:  MOVWF  39
0063:  CALL   01C
....................   
....................  lcd_cmd(0x0C); 		//Escreve comando para ligar o display sem cursor 
0064:  MOVLW  0C
0065:  MOVWF  3E
0066:  CALL   030
....................  lcd_cmd(0x06); 		//Escreve comando para incrementar automaticamente à direita 
0067:  MOVLW  06
0068:  MOVWF  3E
0069:  CALL   030
.................... }  
006A:  BCF    0A.3
006B:  BCF    0A.4
006C:  GOTO   22F (RETURN)
....................  
....................   
.................... unsigned int32 ad0,ad1;    //Variáves para armazenamento da conversão 
.................... unsigned int32 tensao; 
....................  
....................   
.................... void main()                 //Função principal  
.................... {                                   
*
001B:  DATA 00,00
*
0222:  CLRF   04
0223:  BCF    03.7
0224:  MOVLW  1F
0225:  ANDWF  03,F
0226:  BSF    03.5
0227:  BSF    1F.0
0228:  BSF    1F.1
0229:  BSF    1F.2
022A:  BCF    1F.3
022B:  MOVLW  07
022C:  MOVWF  1C
.................... lcd_ini();             //Chama a função para inicialização do LCD      
022D:  BCF    03.5
022E:  GOTO   03E
....................                 
.................... SETUP_ADC_PORTS(RA0_RA1_RA3_ANALOG);  //Configura as entradas analógicas  
022F:  BSF    03.5
0230:  BCF    1F.0
0231:  BCF    1F.1
0232:  BSF    1F.2
0233:  BCF    1F.3
....................                                                                              //RA0,RA1,RA3 
.................... SETUP_ADC(ADC_CLOCK_INTERNAL);       //Configura o conversor AD interno 
0234:  BCF    1F.6
0235:  BCF    03.5
0236:  BSF    1F.6
0237:  BSF    1F.7
0238:  BSF    03.5
0239:  BSF    1F.7
023A:  BCF    03.5
023B:  BSF    1F.0
....................  
.................... printf(lcd_escreve,"\f  CONVERSAO AD"); 
023C:  MOVLW  04
023D:  BSF    03.6
023E:  MOVWF  0D
023F:  MOVLW  00
0240:  MOVWF  0F
0241:  BCF    03.6
0242:  GOTO   0BB
....................  
.................... delay_ms(1500);  
0243:  MOVLW  06
0244:  MOVWF  2C
0245:  MOVLW  FA
0246:  MOVWF  39
0247:  CALL   01C
0248:  DECFSZ 2C,F
0249:  GOTO   245
....................  
.................... while(true)                               //Loop principal 
....................    { 
....................  
....................    SET_ADC_CHANNEL(0);                     //Configura o canal de leitura 0 
024A:  MOVLW  00
024B:  MOVWF  78
024C:  MOVF   1F,W
024D:  ANDLW  C7
024E:  IORWF  78,W
024F:  MOVWF  1F
....................    delay_us(100);                                //Tempo de ajuste do canal (necessário)  
0250:  MOVLW  42
0251:  MOVWF  77
0252:  DECFSZ 77,F
0253:  GOTO   252
0254:  NOP
....................    ad0 = READ_ADC();                          //Faz a conversão AD e a salva na variável  
0255:  BSF    1F.2
0256:  BTFSC  1F.2
0257:  GOTO   256
0258:  BSF    03.5
0259:  MOVF   1E,W
025A:  BCF    03.5
025B:  MOVWF  20
025C:  MOVF   1E,W
025D:  MOVWF  21
025E:  CLRF   22
025F:  CLRF   23
....................                                                                        //ad0 
....................    tensao = (ad0*5000)/1023;                                                                      
0260:  MOVF   23,W
0261:  MOVWF  2F
0262:  MOVF   22,W
0263:  MOVWF  2E
0264:  MOVF   21,W
0265:  MOVWF  2D
0266:  MOVF   20,W
0267:  MOVWF  2C
0268:  CLRF   33
0269:  CLRF   32
026A:  MOVLW  13
026B:  MOVWF  31
026C:  MOVLW  88
026D:  MOVWF  30
026E:  CALL   103
026F:  MOVF   7A,W
0270:  MOVWF  2F
0271:  MOVF   79,W
0272:  MOVWF  2E
0273:  MOVF   78,W
0274:  MOVWF  2D
0275:  MOVF   77,W
0276:  MOVWF  2C
0277:  BCF    03.1
0278:  MOVF   7A,W
0279:  MOVWF  3B
027A:  MOVF   79,W
027B:  MOVWF  3A
027C:  MOVF   78,W
027D:  MOVWF  39
027E:  MOVF   77,W
027F:  MOVWF  38
0280:  CLRF   3F
0281:  CLRF   3E
0282:  MOVLW  03
0283:  MOVWF  3D
0284:  MOVLW  FF
0285:  MOVWF  3C
0286:  CALL   12D
0287:  MOVF   7A,W
0288:  MOVWF  2B
0289:  MOVF   79,W
028A:  MOVWF  2A
028B:  MOVF   78,W
028C:  MOVWF  29
028D:  MOVF   77,W
028E:  MOVWF  28
....................    printf(lcd_escreve,"\fV1 = %04lu mV",tensao);    //Mostra valor da conversão do canal 0 
028F:  MOVLW  0C
0290:  BSF    03.6
0291:  MOVWF  0D
0292:  MOVLW  00
0293:  MOVWF  0F
0294:  BCF    03.0
0295:  MOVLW  06
0296:  BCF    03.6
0297:  MOVWF  2C
0298:  CALL   17C
0299:  MOVLW  44
029A:  MOVWF  04
029B:  MOVF   2B,W
029C:  MOVWF  2F
029D:  MOVF   2A,W
029E:  MOVWF  2E
029F:  MOVF   29,W
02A0:  MOVWF  2D
02A1:  MOVF   28,W
02A2:  MOVWF  2C
02A3:  CALL   1CB
02A4:  MOVLW  20
02A5:  MOVWF  38
02A6:  CALL   085
02A7:  MOVLW  6D
02A8:  MOVWF  38
02A9:  CALL   085
02AA:  MOVLW  56
02AB:  MOVWF  38
02AC:  CALL   085
....................  
....................    SET_ADC_CHANNEL(1);         //Configura o canal de leitura 1 
02AD:  MOVLW  08
02AE:  MOVWF  78
02AF:  MOVF   1F,W
02B0:  ANDLW  C7
02B1:  IORWF  78,W
02B2:  MOVWF  1F
....................    delay_us(100);         //Tempo de ajuste do canal (necessário)  
02B3:  MOVLW  42
02B4:  MOVWF  77
02B5:  DECFSZ 77,F
02B6:  GOTO   2B5
02B7:  NOP
....................    ad1 = READ_ADC();             //Faz a conversão AD e a salva na variável  
02B8:  BSF    1F.2
02B9:  BTFSC  1F.2
02BA:  GOTO   2B9
02BB:  BSF    03.5
02BC:  MOVF   1E,W
02BD:  BCF    03.5
02BE:  MOVWF  24
02BF:  MOVF   1E,W
02C0:  MOVWF  25
02C1:  CLRF   26
02C2:  CLRF   27
....................                                                                        //ad1 
....................    tensao = (ad1*5000)/1023; 
02C3:  MOVF   27,W
02C4:  MOVWF  2F
02C5:  MOVF   26,W
02C6:  MOVWF  2E
02C7:  MOVF   25,W
02C8:  MOVWF  2D
02C9:  MOVF   24,W
02CA:  MOVWF  2C
02CB:  CLRF   33
02CC:  CLRF   32
02CD:  MOVLW  13
02CE:  MOVWF  31
02CF:  MOVLW  88
02D0:  MOVWF  30
02D1:  CALL   103
02D2:  MOVF   7A,W
02D3:  MOVWF  2F
02D4:  MOVF   79,W
02D5:  MOVWF  2E
02D6:  MOVF   78,W
02D7:  MOVWF  2D
02D8:  MOVF   77,W
02D9:  MOVWF  2C
02DA:  BCF    03.1
02DB:  MOVF   7A,W
02DC:  MOVWF  3B
02DD:  MOVF   79,W
02DE:  MOVWF  3A
02DF:  MOVF   78,W
02E0:  MOVWF  39
02E1:  MOVF   77,W
02E2:  MOVWF  38
02E3:  CLRF   3F
02E4:  CLRF   3E
02E5:  MOVLW  03
02E6:  MOVWF  3D
02E7:  MOVLW  FF
02E8:  MOVWF  3C
02E9:  CALL   12D
02EA:  MOVF   7A,W
02EB:  MOVWF  2B
02EC:  MOVF   79,W
02ED:  MOVWF  2A
02EE:  MOVF   78,W
02EF:  MOVWF  29
02F0:  MOVF   77,W
02F1:  MOVWF  28
....................    //Mostra valor da conversão dos canais 1 e 3 
....................    printf(lcd_escreve,"\nV2 = %04lu mV",tensao);  
02F2:  MOVLW  14
02F3:  BSF    03.6
02F4:  MOVWF  0D
02F5:  MOVLW  00
02F6:  MOVWF  0F
02F7:  BCF    03.0
02F8:  MOVLW  06
02F9:  BCF    03.6
02FA:  MOVWF  2C
02FB:  CALL   17C
02FC:  MOVLW  44
02FD:  MOVWF  04
02FE:  MOVF   2B,W
02FF:  MOVWF  2F
0300:  MOVF   2A,W
0301:  MOVWF  2E
0302:  MOVF   29,W
0303:  MOVWF  2D
0304:  MOVF   28,W
0305:  MOVWF  2C
0306:  CALL   1CB
0307:  MOVLW  20
0308:  MOVWF  38
0309:  CALL   085
030A:  MOVLW  6D
030B:  MOVWF  38
030C:  CALL   085
030D:  MOVLW  56
030E:  MOVWF  38
030F:  CALL   085
....................    
....................    delay_ms(500);                 //Atraso de 1 segundo        
0310:  MOVLW  02
0311:  MOVWF  2C
0312:  MOVLW  FA
0313:  MOVWF  39
0314:  CALL   01C
0315:  DECFSZ 2C,F
0316:  GOTO   312
....................    } 
0317:  GOTO   24A
.................... }         
....................  
0318:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
