CCS PCM C Compiler, Version 4.104, 41302               26-jun-10 23:03

               Filename: D:\CDs Kits ACEPIC\CD ACEPIC PRO V2.0\Programas\Exemplos\PIC 16F877A\ADC_7Seg\ADC_7Seg.lst

               ROM used: 382 words (5%)
                         Largest free fragment is 2048
               RAM used: 35 (10%) at main() level
                         41 (11%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... /******************************************************************************* 
.................... *                     Kit de desenvolvimento ACEPIC PRO V2.0                   * 
.................... *                      ACEPIC Tecnologia e Treinamento LTDA                    * 
.................... *                               www.acepic.com.br                              *  
.................... *                                                                              * 
.................... *Objetivo: Teste Display 7 segmentos + conversoses Analógicos Digitais AN0 e AN1 
.................... *Obs.:     Ligar chave 1 do DIP DP1 e chaves 1, 5, 6, 7 e 8 do DIP DP2         *  
.................... *          Após a gravação, tire o cabo serial                                 *  
.................... ********************************************************************************/ 
.................... #include<16F877A.h>  
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC = 10 
.................... #use delay (clock=8000000)         
00C6:  MOVLW  3D
00C7:  MOVWF  04
00C8:  BCF    03.7
00C9:  MOVF   00,W
00CA:  BTFSC  03.2
00CB:  GOTO   0D9
00CC:  MOVLW  02
00CD:  MOVWF  78
00CE:  CLRF   77
00CF:  DECFSZ 77,F
00D0:  GOTO   0CF
00D1:  DECFSZ 78,F
00D2:  GOTO   0CE
00D3:  MOVLW  97
00D4:  MOVWF  77
00D5:  DECFSZ 77,F
00D6:  GOTO   0D5
00D7:  DECFSZ 00,F
00D8:  GOTO   0CC
00D9:  BCF    0A.3
00DA:  BCF    0A.4
00DB:  GOTO   17A (RETURN)
.................... #fuses HS, NOWDT, PUT, BROWNOUT, NOLVP  
....................  
.................... #use fast_io(a)             
....................  
.................... int conta=0; 
.................... int16 adc, d1, d2, d3, d4; 
....................  
.................... /*Matriz de 10 posições contendo o valor a ser enviado para a porta D a fim de 
....................    mostrar o dígito referente nos displays */ 
.................... int digito[10] = 
....................                {0b00111111,    //Dígito 0 
....................                 0b00000110,    //Dígito 1 
....................                 0b01011011,    //Dígito 2 
....................                 0b01001111,    //Dígito 3 
....................                 0b01100110,    //Dígito 4 
....................                 0b01101101,    //Dígito 5 
....................                 0b01111101,    //Dígito 6 
....................                 0b00000111,    //Dígito 7 
....................                 0b01111111,    //Dígito 8 
....................                 0b01101111     //Dígito 9 
....................                }; 
*
00E8:  MOVLW  3F
00E9:  BCF    03.5
00EA:  MOVWF  32
00EB:  MOVLW  06
00EC:  MOVWF  33
00ED:  MOVLW  5B
00EE:  MOVWF  34
00EF:  MOVLW  4F
00F0:  MOVWF  35
00F1:  MOVLW  66
00F2:  MOVWF  36
00F3:  MOVLW  6D
00F4:  MOVWF  37
00F5:  MOVLW  7D
00F6:  MOVWF  38
00F7:  MOVLW  07
00F8:  MOVWF  39
00F9:  MOVLW  7F
00FA:  MOVWF  3A
00FB:  MOVLW  6F
00FC:  MOVWF  3B
....................  
.................... #INT_RTCC               //Identificação da interrupção do Timer 0 
.................... void trata_t0()            //função de tratamento da interrupção do Timer 0    
.................... { 
.................... Conta++;                     //Incrementa a variável conta 
*
002F:  INCF   27,F
.................... if (conta>4) conta = 1;         //Se conta > 4, faz conta = 1 
0030:  MOVF   27,W
0031:  SUBLW  04
0032:  BTFSC  03.0
0033:  GOTO   036
0034:  MOVLW  01
0035:  MOVWF  27
....................  
.................... switch(conta)               //’Chaveia’ o valor da variável conta 
....................           { 
0036:  MOVLW  01
0037:  SUBWF  27,W
0038:  ADDLW  FC
0039:  BTFSC  03.0
003A:  GOTO   093
003B:  ADDLW  04
003C:  GOTO   099
....................          case 1: OUTPUT_D(digito[D1]);   //Coloca na Porta D o valor referente ao dígito 0 
003D:  MOVLW  32
003E:  ADDWF  2A,W
003F:  MOVWF  04
0040:  BCF    03.7
0041:  BTFSC  2B.0
0042:  BSF    03.7
0043:  MOVF   00,W
0044:  MOVWF  43
0045:  BSF    03.5
0046:  CLRF   08
0047:  BCF    03.5
0048:  MOVF   43,W
0049:  MOVWF  08
....................                        OUTPUT_A(0x00);  
004A:  CLRF   05
....................                        OUTPUT_E(0X01);      //Liga o Display 1 e desliga os demais  
004B:  BSF    03.5
004C:  BCF    09.0
004D:  BCF    09.1
004E:  BCF    09.2
004F:  MOVLW  01
0050:  BCF    03.5
0051:  MOVWF  09
....................                        break;  
0052:  GOTO   093
....................       case 2: OUTPUT_D(digito[D2]);   //Coloca na Porta D o valor referente ao dígito 1 
0053:  MOVLW  32
0054:  ADDWF  2C,W
0055:  MOVWF  04
0056:  BCF    03.7
0057:  BTFSC  2D.0
0058:  BSF    03.7
0059:  MOVF   00,W
005A:  MOVWF  43
005B:  BSF    03.5
005C:  CLRF   08
005D:  BCF    03.5
005E:  MOVF   43,W
005F:  MOVWF  08
....................                        OUTPUT_E(0X02);      //Liga o Display 2 e desliga os demais 
0060:  BSF    03.5
0061:  BCF    09.0
0062:  BCF    09.1
0063:  BCF    09.2
0064:  MOVLW  02
0065:  BCF    03.5
0066:  MOVWF  09
....................                        break;  
0067:  GOTO   093
....................       case 3: OUTPUT_D(digito[D3]);   //Coloca na Porta D o valor referente ao dígito 2 
0068:  MOVLW  32
0069:  ADDWF  2E,W
006A:  MOVWF  04
006B:  BCF    03.7
006C:  BTFSC  2F.0
006D:  BSF    03.7
006E:  MOVF   00,W
006F:  MOVWF  43
0070:  BSF    03.5
0071:  CLRF   08
0072:  BCF    03.5
0073:  MOVF   43,W
0074:  MOVWF  08
....................                        OUTPUT_E(0X04);      //Liga o Display 3 e desliga os demais 
0075:  BSF    03.5
0076:  BCF    09.0
0077:  BCF    09.1
0078:  BCF    09.2
0079:  MOVLW  04
007A:  BCF    03.5
007B:  MOVWF  09
....................                        break;  
007C:  GOTO   093
....................       case 4: OUTPUT_D(digito[D4]);   //Coloca na Porta D o valor referente ao dígito 2 
007D:  MOVLW  32
007E:  ADDWF  30,W
007F:  MOVWF  04
0080:  BCF    03.7
0081:  BTFSC  31.0
0082:  BSF    03.7
0083:  MOVF   00,W
0084:  MOVWF  43
0085:  BSF    03.5
0086:  CLRF   08
0087:  BCF    03.5
0088:  MOVF   43,W
0089:  MOVWF  08
....................                        OUTPUT_E(0x00);  
008A:  BSF    03.5
008B:  BCF    09.0
008C:  BCF    09.1
008D:  BCF    09.2
008E:  BCF    03.5
008F:  CLRF   09
....................                        OUTPUT_A(0X20);      //Liga o Display 4 e desliga os demais 
0090:  MOVLW  20
0091:  MOVWF  05
....................                        break;  
0092:  GOTO   093
....................           }  
....................  
.................... SET_TIMER0(100); 
0093:  MOVLW  64
0094:  MOVWF  01
....................    
.................... } 
....................  
....................  
0095:  BCF    0B.2
0096:  BCF    0A.3
0097:  BCF    0A.4
0098:  GOTO   01B
.................... void main() 
.................... { 
*
00DC:  CLRF   04
00DD:  BCF    03.7
00DE:  MOVLW  1F
00DF:  ANDWF  03,F
00E0:  CLRF   27
00E1:  BSF    03.5
00E2:  BSF    1F.0
00E3:  BSF    1F.1
00E4:  BSF    1F.2
00E5:  BCF    1F.3
00E6:  MOVLW  07
00E7:  MOVWF  1C
.................... SET_TRIS_A(0x01);    //Direciona o RA0 como entrada e o restante como saída.                   
*
00FD:  MOVLW  01
00FE:  BSF    03.5
00FF:  MOVWF  05
....................  
.................... ENABLE_INTERRUPTS(GLOBAL|INT_TIMER0);   //Habilita as interrupções Global e do Timer 0/ 
0100:  MOVLW  E0
0101:  BCF    03.5
0102:  IORWF  0B,F
.................... SETUP_TIMER_0(RTCC_INTERNAL | RTCC_DIV_32 | RTCC_8_BIT); //Seleciona o prescaler de 1:32 
0103:  BSF    03.5
0104:  MOVF   01,W
0105:  ANDLW  C0
0106:  IORLW  04
0107:  MOVWF  01
.................... SET_TIMER0(100);                  //Inicia o registrador TMR0 
0108:  MOVLW  64
0109:  BCF    03.5
010A:  MOVWF  01
....................  
.................... SETUP_ADC_PORTS(AN0);       //Configurada a entrada analógica, somente a entrada RA0 
010B:  BSF    03.5
010C:  BCF    1F.0
010D:  BSF    1F.1
010E:  BSF    1F.2
010F:  BSF    1F.3
.................... SETUP_ADC(ADC_CLOCK_INTERNAL);    //Configurado o conversor AD interno    
0110:  BCF    1F.6
0111:  BCF    03.5
0112:  BSF    1F.6
0113:  BSF    1F.7
0114:  BSF    03.5
0115:  BSF    1F.7
0116:  BCF    03.5
0117:  BSF    1F.0
.................... SET_ADC_CHANNEL(0);            //Configurado o canal de leitura 0 
0118:  MOVLW  00
0119:  MOVWF  78
011A:  MOVF   1F,W
011B:  ANDLW  C7
011C:  IORWF  78,W
011D:  MOVWF  1F
.................... delay_us(10); 
011E:  MOVLW  06
011F:  MOVWF  77
0120:  DECFSZ 77,F
0121:  GOTO   120
0122:  NOP
....................  
....................  
....................    
.................... while(true)                     //Loop principal 
....................         { 
....................         adc = READ_ADC(); 
0123:  BSF    1F.2
0124:  BTFSC  1F.2
0125:  GOTO   124
0126:  BSF    03.5
0127:  MOVF   1E,W
0128:  BCF    03.5
0129:  MOVWF  28
012A:  MOVF   1E,W
012B:  MOVWF  29
....................         d1 = adc / 1000; 
012C:  MOVF   29,W
012D:  MOVWF  3F
012E:  MOVF   28,W
012F:  MOVWF  3E
0130:  MOVLW  03
0131:  MOVWF  41
0132:  MOVLW  E8
0133:  MOVWF  40
0134:  CALL   0A1
0135:  MOVF   79,W
0136:  MOVWF  2B
0137:  MOVF   78,W
0138:  MOVWF  2A
....................         d2 = (adc/100) % 10; 
0139:  MOVF   29,W
013A:  MOVWF  3F
013B:  MOVF   28,W
013C:  MOVWF  3E
013D:  CLRF   41
013E:  MOVLW  64
013F:  MOVWF  40
0140:  CALL   0A1
0141:  MOVF   79,W
0142:  MOVWF  3D
0143:  MOVF   78,W
0144:  MOVWF  3C
0145:  MOVF   79,W
0146:  MOVWF  3F
0147:  MOVF   78,W
0148:  MOVWF  3E
0149:  CLRF   41
014A:  MOVLW  0A
014B:  MOVWF  40
014C:  CALL   0A1
014D:  MOVF   77,W
014E:  MOVWF  2C
014F:  MOVF   7A,W
0150:  MOVWF  2D
....................         d3 = (adc/10) % 10; 
0151:  MOVF   29,W
0152:  MOVWF  3F
0153:  MOVF   28,W
0154:  MOVWF  3E
0155:  CLRF   41
0156:  MOVLW  0A
0157:  MOVWF  40
0158:  CALL   0A1
0159:  MOVF   79,W
015A:  MOVWF  3D
015B:  MOVF   78,W
015C:  MOVWF  3C
015D:  MOVF   79,W
015E:  MOVWF  3F
015F:  MOVF   78,W
0160:  MOVWF  3E
0161:  CLRF   41
0162:  MOVLW  0A
0163:  MOVWF  40
0164:  CALL   0A1
0165:  MOVF   77,W
0166:  MOVWF  2E
0167:  MOVF   7A,W
0168:  MOVWF  2F
....................         d4 = (adc/1) % 10; 
0169:  MOVF   29,W
016A:  MOVWF  3F
016B:  MOVF   28,W
016C:  MOVWF  3E
016D:  CLRF   41
016E:  MOVLW  0A
016F:  MOVWF  40
0170:  CALL   0A1
0171:  MOVF   77,W
0172:  MOVWF  30
0173:  MOVF   7A,W
0174:  MOVWF  31
....................         delay_ms(500);           
0175:  MOVLW  02
0176:  MOVWF  3C
0177:  MOVLW  FA
0178:  MOVWF  3D
0179:  GOTO   0C6
017A:  DECFSZ 3C,F
017B:  GOTO   177
....................         } 
017C:  GOTO   123
.................... } 
017D:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
